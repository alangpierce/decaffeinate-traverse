#!/usr/bin/env node -r babel-register

import { createWriteStream } from 'fs';
import { join } from 'path';
import { parse } from 'babylon';

let types = require('../types.json');
let interfaceFile = createWriteStream(join(__dirname, '../dist/decaffeinate-traverse.js.flow'));
let visitorFile = createWriteStream(join(__dirname, '../src/Visitor.js'));
let typesFile = createWriteStream(join(__dirname, '../src/types.js'));

function memoize(fn) {
  let map = new Map();
  return arg => {
    let result = map.get(arg);
    if (typeof result === 'undefined') {
      result = fn(arg);
      map.set(arg, result);
    }
    return result;
  };
}

let parseFlowTypeSignature = memoize(signature => {
  let ast = parse(`type A = ${signature};`, { plugins: ['flow'] });
  return ast.program.body[0].right;
});

let getType = memoize(name => types.find(t => t.name === name));

let expandType = memoize(name => {
  let type = Object.assign({}, getType(name));
  
  if (type.extends) {
    type.properties = [
      ...type.properties,
      ...expandType(type.extends).properties
    ];
  }
  
  return type;
});

let getTypeSymbol = memoize(name => {
  let type = getType(name);
  return type && type.symbol || name;
});

function expandTypes(types) {
  return types.map(type => expandType(type.name));
}

function getAncestorTypes(name) {
  let type = getType(name);
  
  if (!type.extends) {
    return [];
  } else {
    return [getType(type.extends), ...getAncestorTypes(type.extends)];
  }
}

function unionTypes(types) {
  let unionMap = new Map();

  function addTypeToUnion(unionTypeName, typeName) {
    let typesForUnionType = unionMap.get(unionTypeName) || [];
    typesForUnionType.push(typeName);
    unionMap.set(unionTypeName, typesForUnionType);
  }

  types.forEach(type => {
    if (type.groups) {
      type.groups.forEach(group => addTypeToUnion(group, type.name));
    }

    for (let ancestor of getAncestorTypes(type.name)) {
      if (ancestor.abstract) {
        addTypeToUnion(ancestor.name, type.name);
        break;
      }
    }
  });

  let result = [];
  
  unionMap.forEach((types, name) => {
    result.push({ name, types });
  });
  
  return result;
}

let expandedTypes = expandTypes(types);
let unions = unionTypes(expandedTypes);
let allNodeTypes = expandedTypes.concat(unions).reduce(
  (all, type) => all.add(type.name),
  new Set()
);

function containsNodeType(typeSignature) {
  function flowTypeContainsNodeType(flowType) {
    switch (flowType && flowType.type) {
      case 'NullableTypeAnnotation':
        return flowTypeContainsNodeType(flowType.typeAnnotation);
      
      case 'UnionTypeAnnotation':
        return flowType.types.some(flowTypeContainsNodeType);
      
      case 'GenericTypeAnnotation':
        return allNodeTypes.has(flowType.id.name) || flowTypeContainsNodeType(flowType.typeParameters);
      
      case 'TypeParameterInstantiation':
        return flowType.params.some(flowTypeContainsNodeType);
    }
  }
  
  return flowTypeContainsNodeType(parseFlowTypeSignature(typeSignature));
}

function isOptional(name) {
  return name[0] === '?';
}

expandedTypes
  .filter(type => !type.abstract)
  .forEach(type => {
    interfaceFile.write(`declare type ${getTypeSymbol(type.name)} = {\n`);
    interfaceFile.write(`  type: '${type.name}';\n`);

    type.properties.forEach(property => {
      interfaceFile.write(`  ${property.name}: ${getTypeSymbol(property.type)};\n`);
    });

    interfaceFile.write(`};\n\n`);
  });

unions.forEach(type => {
  interfaceFile.write(`declare type ${getTypeSymbol(type.name)} =\n`);
  
  type.types.forEach((type, i, types) => {
    if (i === types.length - 1) {
      interfaceFile.write(`  ${getTypeSymbol(type)};\n\n`);
    } else {
      interfaceFile.write(`  ${getTypeSymbol(type)} |\n`);
    }
  });
});

typesFile.write(`/* @flow */\n\n`);

expandedTypes
  .filter(type => !type.abstract)
  .forEach(type => {
    typesFile.write(`export type ${getTypeSymbol(type.name)} = {\n`);
    typesFile.write(`  type: '${type.name}';\n`);

    type.properties.forEach(property => {
      typesFile.write(`  ${property.name}: ${getTypeSymbol(property.type)};\n`);
    });

    typesFile.write(`};\n\n`);
  });

unions.forEach(type => {
  typesFile.write(`export type ${type.name} =\n`);

  type.types.forEach((type, i, types) => {
    if (i === types.length - 1) {
      typesFile.write(`  ${getTypeSymbol(type)};\n\n`);
    } else {
      typesFile.write(`  ${getTypeSymbol(type)} |\n`);
    }
  });
});

visitorFile.write(`/* @flow */\n`);
visitorFile.write(`\n`);
visitorFile.write(`/**\n`);
visitorFile.write(` * NOTE: This file is automatically generated. To edit:\n`);
visitorFile.write(` * - modify types.json to update the types generated by decaffeinate-parser\n`);
visitorFile.write(` * - run \`npm run flow && npm test\` to check your work\n`);
visitorFile.write(` */\n`);
visitorFile.write(`\n`);
visitorFile.write(`import BasicVisitor from './BasicVisitor.js';\n`);
visitorFile.write(`import type { ${[...allNodeTypes].map(getTypeSymbol).join(', ')} } from './types.js';\n`);
visitorFile.write(`\n`);
visitorFile.write(`/**\n`);
visitorFile.write(` * Implements the visitor pattern for decaffeinate-parser ASTs.\n`);
visitorFile.write(` */\n`);
visitorFile.write(`export default class Visitor extends BasicVisitor {\n`);
visitorFile.write(`  visitNode(node: Node) {\n`);
visitorFile.write(`    switch (node.type) {\n`);
expandedTypes
  .filter(type => !type.abstract)
  .forEach((type, i, types) => {
    visitorFile.write(`      case '${type.name}':\n`);
    visitorFile.write(`        this.visit${type.name}(node);\n`);
    visitorFile.write(`        break;\n\n`);
    if (i === types.length - 1) {
      visitorFile.write(`      default:\n`);
      visitorFile.write(`        throw new Error(\`unexpected node type: \${node.type}\`);\n`);
    }
  });
visitorFile.write(`    }\n`);
visitorFile.write(`  }\n\n`);

expandedTypes
  .filter(type => !type.abstract)
  .forEach((type, i, types) => {
    let visitsChildren = false;
    
    visitorFile.write(`  visit${type.name}(node: ${getTypeSymbol(type.name)}) {\n`);
    type.properties.forEach(property => {
      let match = property.type.match(/^Array<(.+)>$/);
      let type = property.type;
      let isArray = false;
      
      if (match) {
        type = match[1];
        isArray = true;
      }
      
      if (containsNodeType(type)) {
        visitsChildren = true;
        let visitor = 'descend';
        let optional = isOptional(type);

        if (optional) {
          visitorFile.write(`    if (node.${property.name}) {\n`);
          visitorFile.write(`  `);
        }

        if (isArray) {
          visitorFile.write(`    node.${property.name}.forEach(child => this.${visitor}(child));\n`);
        } else {
          visitorFile.write(`    this.${visitor}(node.${property.name});\n`);
        }

        if (optional) {
          visitorFile.write(`    }\n`);
        }
      }
    });
    
    if (!visitsChildren) {
      visitorFile.write(`    // no children\n`);
    }
    
    visitorFile.write(`  }\n`);
    if (i !== types.length - 1) {
      visitorFile.write(`\n`);
    }
  });
visitorFile.write(`}\n`);
